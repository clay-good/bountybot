"""Vulnerability detector using transformer models."""

import re
import logging
from typing import List, Optional

from bountybot.ml.transformers.models import (
    ProgrammingLanguage,
    VulnerabilityPattern,
    VulnerabilityPatternType,
    TransformerConfig,
    CodeContext
)

logger = logging.getLogger(__name__)


class VulnerabilityDetector:
    """Detect vulnerabilities in code using transformers."""
    
    # Vulnerability patterns (simplified - in production use ML models)
    PATTERNS = {
        VulnerabilityPatternType.SQL_INJECTION: [
            r'execute\s*\(\s*["\'].*\+.*["\']',
            r'query\s*\(\s*["\'].*%s.*["\']',
            r'SELECT.*FROM.*WHERE.*\+',
        ],
        VulnerabilityPatternType.XSS: [
            r'innerHTML\s*=',
            r'document\.write\s*\(',
            r'eval\s*\(',
        ],
        VulnerabilityPatternType.COMMAND_INJECTION: [
            r'os\.system\s*\(',
            r'subprocess\.call\s*\(',
            r'exec\s*\(',
        ],
        VulnerabilityPatternType.HARDCODED_CREDENTIALS: [
            r'password\s*=\s*["\'][^"\']+["\']',
            r'api_key\s*=\s*["\'][^"\']+["\']',
            r'secret\s*=\s*["\'][^"\']+["\']',
        ],
    }
    
    def __init__(self, config: TransformerConfig):
        self.config = config
    
    def detect(
        self,
        code: str,
        language: ProgrammingLanguage,
        context: Optional[CodeContext] = None
    ) -> List[VulnerabilityPattern]:
        """Detect vulnerabilities in code."""
        vulnerabilities = []
        lines = code.split('\n')
        
        for pattern_type, patterns in self.PATTERNS.items():
            for pattern in patterns:
                for line_num, line in enumerate(lines, 1):
                    if re.search(pattern, line, re.IGNORECASE):
                        vuln = VulnerabilityPattern(
                            pattern_type=pattern_type,
                            confidence=0.85,
                            line_numbers=[line_num],
                            code_snippet=line.strip(),
                            description=f"Potential {pattern_type.value} detected",
                            severity="high"
                        )
                        vulnerabilities.append(vuln)
        
        return vulnerabilities


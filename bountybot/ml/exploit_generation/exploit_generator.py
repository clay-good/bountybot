"""AI-powered exploit generator."""

import logging
from typing import Optional, Dict

from bountybot.ml.exploit_generation.models import (
    ExploitType,
    ExploitResult,
    ExploitComplexity,
    ExploitConfig,
    SafetyConstraints
)
from bountybot.ml.exploit_generation.payload_generator import PayloadGenerator
from bountybot.ml.exploit_generation.exploit_validator import ExploitValidator
from bountybot.ml.exploit_generation.template_engine import TemplateEngine

logger = logging.getLogger(__name__)


class ExploitGenerator:
    """
    AI-powered exploit generator with safety constraints.
    
    Generates exploits for vulnerability validation with strict ethical guidelines.
    """
    
    def __init__(self, config: Optional[ExploitConfig] = None):
        """Initialize exploit generator."""
        self.config = config or ExploitConfig()
        
        # Validate safety constraints
        if not self.config.safety_constraints.validate():
            raise ValueError("Safety constraints must be enabled")
        
        self.payload_generator = PayloadGenerator(self.config)
        self.validator = ExploitValidator(self.config)
        self.template_engine = TemplateEngine()
        
        logger.info("Initialized ExploitGenerator with safety constraints enabled")
    
    def generate(
        self,
        exploit_type: ExploitType,
        vulnerability_description: str,
        target_info: Optional[Dict] = None
    ) -> ExploitResult:
        """
        Generate exploit for vulnerability.
        
        Args:
            exploit_type: Type of exploit
            vulnerability_description: Description of vulnerability
            target_info: Optional target information
        
        Returns:
            Exploit result with payload and steps
        """
        logger.info(f"Generating {exploit_type.value} exploit...")
        
        # Generate payload
        payload = self.payload_generator.generate(
            exploit_type,
            vulnerability_description,
            target_info
        )
        
        # Determine complexity
        complexity = self._determine_complexity(exploit_type, payload)
        
        # Generate exploitation steps
        steps = self._generate_steps(exploit_type, payload)
        
        # Create result
        result = ExploitResult(
            exploit_type=exploit_type,
            payload=payload,
            description=f"Exploit for {exploit_type.value}",
            complexity=complexity,
            confidence=0.85,
            steps=steps,
            prerequisites=self._get_prerequisites(exploit_type),
            success_indicators=self._get_success_indicators(exploit_type)
        )
        
        # Validate safety
        result.safety_validated = self.validator.validate(result)
        
        logger.info(f"Generated exploit (safety_validated={result.safety_validated})")
        return result
    
    def _determine_complexity(self, exploit_type: ExploitType, payload: str) -> ExploitComplexity:
        """Determine exploit complexity."""
        if len(payload) < 100:
            return ExploitComplexity.SIMPLE
        elif len(payload) < 500:
            return ExploitComplexity.MODERATE
        elif len(payload) < 1000:
            return ExploitComplexity.COMPLEX
        else:
            return ExploitComplexity.ADVANCED
    
    def _generate_steps(self, exploit_type: ExploitType, payload: str) -> list:
        """Generate exploitation steps."""
        steps = [
            "1. Identify vulnerable endpoint",
            "2. Prepare exploit payload",
            "3. Send payload to target",
            "4. Verify exploitation success",
            "5. Document findings"
        ]
        return steps
    
    def _get_prerequisites(self, exploit_type: ExploitType) -> list:
        """Get prerequisites for exploit."""
        return [
            "Valid authentication credentials",
            "Network access to target",
            "Permission to test",
            "Sandbox environment"
        ]
    
    def _get_success_indicators(self, exploit_type: ExploitType) -> list:
        """Get success indicators."""
        return [
            "Vulnerability confirmed",
            "Expected behavior observed",
            "No system damage"
        ]


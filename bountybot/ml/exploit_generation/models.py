"""Data models for exploit generation."""

from dataclasses import dataclass, field
from enum import Enum
from typing import List, Dict, Optional
from datetime import datetime


class ExploitType(Enum):
    """Types of exploits."""
    SQL_INJECTION = "sql_injection"
    XSS_REFLECTED = "xss_reflected"
    XSS_STORED = "xss_stored"
    CSRF = "csrf"
    SSRF = "ssrf"
    RCE = "rce"
    LFI = "lfi"
    XXE = "xxe"
    COMMAND_INJECTION = "command_injection"
    DESERIALIZATION = "deserialization"


class ExploitComplexity(Enum):
    """Exploit complexity levels."""
    SIMPLE = "simple"
    MODERATE = "moderate"
    COMPLEX = "complex"
    ADVANCED = "advanced"


@dataclass
class SafetyConstraints:
    """Safety constraints for exploit generation."""
    require_authorization: bool = True
    sandbox_only: bool = True
    no_destructive_operations: bool = True
    rate_limit_enabled: bool = True
    audit_logging: bool = True
    ethical_use_only: bool = True
    
    def validate(self) -> bool:
        """Validate that safety constraints are enabled."""
        return (
            self.require_authorization and
            self.sandbox_only and
            self.no_destructive_operations and
            self.audit_logging and
            self.ethical_use_only
        )


@dataclass
class PayloadTemplate:
    """Template for exploit payload."""
    exploit_type: ExploitType
    template_string: str
    parameters: List[str]
    description: str
    complexity: ExploitComplexity
    success_indicators: List[str] = field(default_factory=list)
    
    def render(self, params: Dict[str, str]) -> str:
        """Render template with parameters."""
        payload = self.template_string
        for key, value in params.items():
            payload = payload.replace(f"{{{key}}}", value)
        return payload


@dataclass
class ExploitResult:
    """Result of exploit generation."""
    exploit_type: ExploitType
    payload: str
    description: str
    complexity: ExploitComplexity
    confidence: float
    steps: List[str] = field(default_factory=list)
    prerequisites: List[str] = field(default_factory=list)
    success_indicators: List[str] = field(default_factory=list)
    safety_validated: bool = False
    timestamp: datetime = field(default_factory=datetime.utcnow)
    
    def is_safe_to_execute(self) -> bool:
        """Check if exploit is safe to execute."""
        return self.safety_validated and self.confidence > 0.7


@dataclass
class ExploitConfig:
    """Configuration for exploit generation."""
    ai_model: str = "claude-3-5-sonnet-20241022"
    max_payload_length: int = 10000
    enable_multi_stage: bool = True
    enable_obfuscation: bool = False
    safety_constraints: SafetyConstraints = field(default_factory=SafetyConstraints)
    timeout_seconds: int = 30


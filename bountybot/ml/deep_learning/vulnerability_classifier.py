"""
Vulnerability classifier using deep learning.

High-level interface for vulnerability classification.
"""

import logging
from typing import List, Dict, Optional
from pathlib import Path

from bountybot.ml.deep_learning.models import (
    VulnerabilityType,
    ClassificationResult,
    TrainingConfig,
    FeatureVector
)
from bountybot.ml.deep_learning.neural_network import NeuralNetwork
from bountybot.ml.deep_learning.feature_engineering import FeatureEngineering

logger = logging.getLogger(__name__)


class VulnerabilityClassifier:
    """
    High-level vulnerability classifier.
    
    Combines feature engineering and neural network for end-to-end classification.
    """
    
    def __init__(self, config: Optional[TrainingConfig] = None, model_path: Optional[str] = None):
        """
        Initialize classifier.
        
        Args:
            config: Training configuration (if training new model)
            model_path: Path to pre-trained model (if loading existing model)
        """
        self.config = config or TrainingConfig()
        self.feature_engineer = FeatureEngineering()
        self.model = NeuralNetwork(self.config)
        
        if model_path and Path(model_path).exists():
            self.load_model(model_path)
            logger.info(f"Loaded pre-trained model from {model_path}")
        else:
            logger.info("Initialized new classifier model")
    
    def classify(self, title: str, description: str, metadata: Optional[Dict] = None) -> ClassificationResult:
        """
        Classify a vulnerability report.
        
        Args:
            title: Vulnerability title
            description: Vulnerability description
            metadata: Optional metadata
        
        Returns:
            Classification result with predicted type and confidence
        """
        # Extract features
        features = self.feature_engineer.extract_features(title, description, metadata)
        
        # Predict using neural network
        result = self.model.predict(features)
        
        # Add feature importance
        result.feature_importance = self.feature_engineer.get_feature_importance(features)
        
        logger.info(
            f"Classified vulnerability as {result.predicted_type.value} "
            f"with confidence {result.confidence:.2%}"
        )
        
        return result
    
    def classify_batch(self, reports: List[Dict]) -> List[ClassificationResult]:
        """
        Classify multiple vulnerability reports.
        
        Args:
            reports: List of reports with 'title' and 'description'
        
        Returns:
            List of classification results
        """
        results = []
        
        for report in reports:
            result = self.classify(
                report.get('title', ''),
                report.get('description', ''),
                report.get('metadata', {})
            )
            results.append(result)
        
        return results
    
    def get_confidence_threshold(self, target_precision: float = 0.95) -> float:
        """
        Calculate confidence threshold for target precision.
        
        This would be calibrated on a validation set in production.
        
        Args:
            target_precision: Target precision (0-1)
        
        Returns:
            Confidence threshold
        """
        # Simplified implementation - in production, calibrate on validation data
        return 0.5 + (target_precision - 0.5) * 0.8
    
    def save_model(self, filepath: str):
        """Save model to file."""
        self.model.save_weights(filepath)
        logger.info(f"Saved model to {filepath}")
    
    def load_model(self, filepath: str):
        """Load model from file."""
        self.model.load_weights(filepath)
        logger.info(f"Loaded model from {filepath}")
    
    def get_model_info(self) -> Dict:
        """Get information about the model."""
        return {
            'version': self.model.version,
            'num_parameters': self.model.get_num_parameters(),
            'model_size_mb': self.model.get_model_size_mb(),
            'input_size': self.config.input_size,
            'hidden_sizes': self.config.hidden_sizes,
            'output_size': self.config.output_size,
            'is_trained': self.model.is_trained,
        }
    
    def summary(self) -> str:
        """Get model summary."""
        return self.model.summary()


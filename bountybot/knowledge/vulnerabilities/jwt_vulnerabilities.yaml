vulnerability:
  name: JWT (JSON Web Token) Vulnerabilities
  category: A07:2021 - Identification and Authentication Failures
  cwe: CWE-347, CWE-287
  owasp_api: API2:2023 - Broken Authentication
  
definition: |
  JWT vulnerabilities occur when JSON Web Tokens are improperly implemented,
  validated, or secured. Attackers can exploit these flaws to forge tokens,
  bypass authentication, escalate privileges, or gain unauthorized access to
  protected resources.

common_patterns:
  - Algorithm confusion attacks (alg: none)
  - Weak signing keys or secrets
  - Missing signature verification
  - Algorithm substitution (RS256 to HS256)
  - Token expiration not validated
  - Claims manipulation
  - Key confusion attacks
  - JWT stored insecurely (localStorage)
  - Sensitive data in JWT payload
  - Missing audience validation
  - Token replay attacks
  - JWK injection attacks

preconditions:
  - Application uses JWT for authentication
  - JWT implementation has security flaws
  - Weak or predictable signing keys
  - Insufficient token validation
  - Client-side token storage
  - Missing security headers

exploitation_requirements:
  - Ability to intercept or obtain JWT tokens
  - Knowledge of JWT structure and algorithms
  - Tools for JWT manipulation (jwt.io, jwt_tool)
  - Understanding of cryptographic algorithms
  - Ability to craft custom tokens

false_positive_indicators:
  - Strong signature verification with proper algorithms
  - Secure key management (RS256, ES256)
  - Token expiration properly validated
  - Audience and issuer claims validated
  - Tokens stored securely (HttpOnly cookies)
  - Short token lifetimes with refresh tokens
  - Token revocation mechanism implemented
  - Proper algorithm whitelist enforcement

common_attack_vectors:
  algorithm_confusion:
    description: "Change algorithm to 'none' to bypass signature"
    payload: |
      {
        "alg": "none",
        "typ": "JWT"
      }
    impact: "Complete authentication bypass"
  
  algorithm_substitution:
    description: "Change RS256 to HS256 using public key as secret"
    steps:
      - "Obtain public key from server"
      - "Change alg from RS256 to HS256"
      - "Sign token with public key as HMAC secret"
    impact: "Token forgery and authentication bypass"
  
  weak_secret:
    description: "Brute force or guess weak signing secret"
    tools:
      - "hashcat"
      - "jwt_tool"
      - "john the ripper"
    common_weak_secrets:
      - "secret"
      - "password"
      - "123456"
      - "jwt_secret"
  
  claims_manipulation:
    description: "Modify claims without proper validation"
    examples:
      - "Change 'sub' (subject) to another user ID"
      - "Modify 'role' or 'admin' claims"
      - "Extend 'exp' (expiration) time"
      - "Change 'aud' (audience) claim"
  
  jwk_injection:
    description: "Inject malicious JWK in header"
    payload: |
      {
        "alg": "RS256",
        "typ": "JWT",
        "jwk": {
          "kty": "RSA",
          "kid": "attacker-key",
          "use": "sig",
          "n": "...",
          "e": "AQAB"
        }
      }
  
  key_confusion:
    description: "Confuse public/private key usage"
    scenario: "Use public key where private key expected"

jwt_structure:
  header:
    - "alg: Algorithm (HS256, RS256, ES256, none)"
    - "typ: Token type (JWT)"
    - "kid: Key ID"
    - "jwk: JSON Web Key"
  payload:
    - "iss: Issuer"
    - "sub: Subject (user ID)"
    - "aud: Audience"
    - "exp: Expiration time"
    - "nbf: Not before time"
    - "iat: Issued at time"
    - "jti: JWT ID"
    - "Custom claims (role, permissions, etc.)"
  signature:
    - "HMACSHA256(base64UrlEncode(header) + '.' + base64UrlEncode(payload), secret)"

detection_methods:
  - Algorithm manipulation testing
  - Signature removal (alg: none)
  - Claims modification testing
  - Token expiration testing
  - Weak secret brute forcing
  - Key confusion testing
  - JWK injection testing
  - Token replay testing
  - Audience validation testing
  - Cross-service token testing

mitigation:
  - Use strong algorithms (RS256, ES256, PS256)
  - Never use 'none' algorithm
  - Implement algorithm whitelist
  - Use strong, random signing secrets (256+ bits)
  - Validate all JWT claims (exp, iss, aud, nbf)
  - Implement proper signature verification
  - Use short token lifetimes (5-15 minutes)
  - Implement refresh token mechanism
  - Store tokens securely (HttpOnly, Secure cookies)
  - Implement token revocation/blacklist
  - Use proper key management (rotate keys)
  - Validate 'kid' parameter against whitelist
  - Don't store sensitive data in JWT payload
  - Implement rate limiting on token endpoints
  - Use HTTPS for all token transmission
  - Implement proper error handling
  - Regular security audits of JWT implementation

severity_factors:
  critical:
    - Complete authentication bypass
    - Administrative access through token forgery
    - Algorithm confusion allowing any token creation
    - Weak secret allowing token forgery
  high:
    - Privilege escalation through claims manipulation
    - Token forgery with significant effort
    - Long-lived tokens without revocation
    - Sensitive data exposure in tokens
  medium:
    - Token replay with limited impact
    - Information disclosure in JWT payload
    - Missing expiration validation
    - Insecure token storage
  low:
    - Minor information leakage
    - Requires significant resources to exploit
    - Limited impact on security

business_impact:
  - Account takeover and identity theft
  - Unauthorized access to user data
  - Privilege escalation to admin accounts
  - Data breaches and compliance violations
  - Financial fraud
  - Reputational damage
  - Legal and regulatory penalties

compliance_considerations:
  - PCI DSS: Requirement 6.5.10, 8.2
  - GDPR: Article 32 (Security of processing)
  - SOC 2: CC6.1, CC6.2
  - ISO 27001: A.9.4.2, A.14.2.5
  - NIST: IA-2, IA-5, SC-13

remediation_priority: CRITICAL

testing_tools:
  - jwt.io (JWT decoder and debugger)
  - jwt_tool (comprehensive JWT testing)
  - Burp Suite (JWT manipulation)
  - OWASP ZAP
  - hashcat (secret brute forcing)
  - Postman (API testing)
  - Python PyJWT library
  - Node.js jsonwebtoken library

secure_implementation_examples:
  nodejs_secure:
    - |
      const jwt = require('jsonwebtoken');
      
      // Signing
      const token = jwt.sign(
        { sub: userId, role: 'user' },
        process.env.JWT_SECRET,
        { 
          algorithm: 'RS256',
          expiresIn: '15m',
          issuer: 'myapp.com',
          audience: 'myapp.com'
        }
      );
      
      // Verification
      const decoded = jwt.verify(token, publicKey, {
        algorithms: ['RS256'],
        issuer: 'myapp.com',
        audience: 'myapp.com'
      });
  
  python_secure:
    - |
      import jwt
      from datetime import datetime, timedelta
      
      # Signing
      payload = {
        'sub': user_id,
        'role': 'user',
        'exp': datetime.utcnow() + timedelta(minutes=15),
        'iss': 'myapp.com',
        'aud': 'myapp.com'
      }
      token = jwt.encode(payload, private_key, algorithm='RS256')
      
      # Verification
      decoded = jwt.decode(
        token,
        public_key,
        algorithms=['RS256'],
        issuer='myapp.com',
        audience='myapp.com'
      )

security_best_practices:
  - "Use asymmetric algorithms (RS256, ES256) for production"
  - "Never use 'none' algorithm - explicitly reject it"
  - "Implement algorithm whitelist in verification"
  - "Use strong secrets (256+ bits) for HMAC algorithms"
  - "Validate all standard claims (exp, iss, aud, nbf)"
  - "Keep token lifetime short (5-15 minutes)"
  - "Implement refresh token mechanism"
  - "Store tokens in HttpOnly, Secure cookies"
  - "Implement token revocation mechanism"
  - "Rotate signing keys regularly"
  - "Don't store sensitive data in JWT payload"
  - "Use HTTPS for all token transmission"
  - "Implement rate limiting on auth endpoints"
  - "Log and monitor token-related security events"
  - "Regular security audits of JWT implementation"

prevention_checklist:
  - "[ ] Strong algorithm enforced (RS256/ES256)"
  - "[ ] 'none' algorithm explicitly rejected"
  - "[ ] Algorithm whitelist implemented"
  - "[ ] Strong signing secret (256+ bits)"
  - "[ ] Signature verification always performed"
  - "[ ] Expiration (exp) claim validated"
  - "[ ] Issuer (iss) claim validated"
  - "[ ] Audience (aud) claim validated"
  - "[ ] Short token lifetime (5-15 min)"
  - "[ ] Refresh token mechanism implemented"
  - "[ ] Tokens stored securely (HttpOnly cookies)"
  - "[ ] Token revocation mechanism exists"
  - "[ ] No sensitive data in JWT payload"
  - "[ ] HTTPS enforced for token transmission"
  - "[ ] Rate limiting on auth endpoints"

references:
  - "RFC 7519: JSON Web Token (JWT)"
  - "RFC 8725: JWT Best Current Practices"
  - "OWASP JWT Cheat Sheet"
  - "CWE-347: Improper Verification of Cryptographic Signature"
  - "Auth0 JWT Handbook"
  - "NIST SP 800-63B: Digital Identity Guidelines"


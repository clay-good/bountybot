# bountybot Configuration
api:
  default_provider: anthropic
  providers:
    anthropic:
      api_key: ${ANTHROPIC_API_KEY}
      model: claude-sonnet-4-20250514
      max_tokens: 8192
      temperature: 0.3
      rate_limit:
        requests_per_minute: 50
        tokens_per_minute: 160000
    openai:
      api_key: ${OPENAI_API_KEY}
      model: gpt-4-turbo-preview
      max_tokens: 4096
      temperature: 0.3
      rate_limit:
        requests_per_minute: 500
        tokens_per_minute: 150000
    gemini:
      api_key: ${GEMINI_API_KEY}
      model: gemini-1.5-pro
      max_tokens: 8192
      temperature: 0.3
      rate_limit:
        requests_per_minute: 60

validation:
  parallel_tasks: 4
  cache_ttl: 3600
  confidence_threshold: 60

deduplication:
  enabled: true
  exact_match_threshold: 0.95
  fuzzy_match_threshold: 0.85
  duplicate_threshold: 0.75
  persistence_file: ./data/report_fingerprints.json

scoring:
  cvss_enabled: true
  auto_calculate: true
  include_temporal_metrics: true

false_positive_detection:
  enabled: true
  fp_threshold: 0.6  # 60% confidence threshold
  min_evidence_score: 40  # Minimum evidence quality score

exploit_complexity:
  enabled: true
  include_prerequisites: true
  include_barriers: true

attack_chains:
  enabled: true
  min_chain_length: 2  # Minimum vulnerabilities to consider a chain
  detect_amplification: true

# Remediation prioritization
prioritization:
  enabled: true
  weights:
    cvss: 0.30              # CVSS base score weight
    exploitability: 0.25    # Exploit complexity weight
    confidence: 0.20        # Confidence/FP weight
    chain_amplification: 0.15  # Attack chain weight
    business_impact: 0.10   # Business impact weight
  critical_components:
    - authentication
    - payment
    - database
    - api
    - admin
    - user_data

# Database configuration
database:
  enabled: false  # Set to true to enable persistent storage
  # PostgreSQL (production)
  url: "postgresql://bountybot:password@localhost:5432/bountybot"
  # SQLite (development/testing)
  # url: "sqlite:///bountybot.db"
  echo: false  # Set to true to log SQL statements
  pool_size: 5
  max_overflow: 10
  auto_migrate: true  # Automatically apply migrations on startup

code_analysis:
  enabled: true
  languages:
    - python
    - javascript
    - java
    - php
    - ruby
  exclude_patterns:
    - "*/node_modules/*"
    - "*/.venv/*"
    - "*/vendor/*"
    - "*/__pycache__/*"
    - "*/build/*"
    - "*/.git/*"
  max_file_size_mb: 10
  
target_testing:
  enabled: false
  timeout_seconds: 10
  max_requests: 20
  safe_methods_only: true
  respect_rate_limits: true
  
output:
  formats:
    - json
    - markdown
  directory: ./validation_results
  include_timestamps: true
  
cost_management:
  max_cost_per_validation: 5.00
  max_daily_cost: 100.00
  warning_threshold: 0.80
  track_usage: true

logging:
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: bountybot.log
  structured_logging: false  # Enable JSON structured logging
  redact_sensitive: true  # Redact sensitive data in logs
  include_context: true  # Include request context in logs


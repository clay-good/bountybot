name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: PR Validation
  pr-validation:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
      
      - name: Check for breaking changes
        run: |
          # Check if PR contains breaking changes
          if git log --format=%B origin/${{ github.base_ref }}..HEAD | grep -i "BREAKING CHANGE"; then
            echo "⚠️ This PR contains breaking changes"
            echo "breaking_change=true" >> $GITHUB_ENV
          fi
      
      - name: Check file changes
        run: |
          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          
          # Count changes by type
          PYTHON_FILES=$(grep "\.py$" changed_files.txt | wc -l)
          TEST_FILES=$(grep "^tests/" changed_files.txt | wc -l)
          DOC_FILES=$(grep "\.md$\|^docs/" changed_files.txt | wc -l)
          
          echo "Python files changed: $PYTHON_FILES"
          echo "Test files changed: $TEST_FILES"
          echo "Documentation files changed: $DOC_FILES"
          
          # Check if tests are needed
          if [ $PYTHON_FILES -gt 0 ] && [ $TEST_FILES -eq 0 ]; then
            echo "⚠️ Python files changed but no test files modified"
            echo "needs_tests=true" >> $GITHUB_ENV
          fi
      
      - name: Comment on PR if tests needed
        if: env.needs_tests == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Tests may be needed**: This PR modifies Python code but doesn\'t include test changes. Please ensure adequate test coverage.'
            })

  # Job 2: Code Review Automation
  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install review tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 bandit
      
      - name: Run automated review
        run: |
          # Get changed Python files
          git diff --name-only --diff-filter=AM origin/${{ github.base_ref }}...HEAD | grep "\.py$" > changed_files.txt || true
          
          if [ -s changed_files.txt ]; then
            echo "Reviewing changed files..."
            cat changed_files.txt | xargs pylint --exit-zero --output-format=json > pylint-report.json
            cat changed_files.txt | xargs flake8 --exit-zero --format=json > flake8-report.json
            cat changed_files.txt | xargs bandit -f json -o bandit-report.json || true
          fi
      
      - name: Upload review reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-review-reports
          path: |
            pylint-report.json
            flake8-report.json
            bandit-report.json

  # Job 3: Test Coverage Check
  coverage-check:
    name: Check Test Coverage
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov
      
      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=bountybot --cov-report=json --cov-report=term
      
      - name: Get coverage percentage
        id: coverage
        run: |
          COVERAGE=$(python -c "import json; data = json.load(open('coverage.json')); print(f\"{data['totals']['percent_covered']:.1f}\")")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
      
      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const emoji = coverage >= 90 ? '🎉' : coverage >= 80 ? '✅' : coverage >= 70 ? '⚠️' : '❌';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **Test Coverage**: ${coverage}%\n\nTarget: 80%+`
            });

  # Job 4: Performance Impact Check
  performance-check:
    name: Check Performance Impact
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-benchmark
      
      - name: Run base benchmarks
        run: |
          python -m pytest tests/ -v -m benchmark --benchmark-only --benchmark-json=base-benchmark.json
        continue-on-error: true
      
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Install PR dependencies
        run: |
          pip install -e .
      
      - name: Run PR benchmarks
        run: |
          python -m pytest tests/ -v -m benchmark --benchmark-only --benchmark-json=pr-benchmark.json
        continue-on-error: true
      
      - name: Compare benchmarks
        run: |
          echo "Benchmark comparison:"
          # Add benchmark comparison logic here
          # Could use pytest-benchmark compare or custom script
      
      - name: Upload benchmark comparison
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-comparison
          path: |
            base-benchmark.json
            pr-benchmark.json

  # Job 5: Security Impact Check
  security-check:
    name: Check Security Impact
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'
      
      - name: Check for new vulnerabilities
        run: |
          # Compare vulnerabilities with base branch
          echo "Checking for new security issues..."
          # Add comparison logic here
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: trivy-results.json

  # Job 6: Documentation Check
  documentation-check:
    name: Check Documentation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for documentation updates
        run: |
          # Get changed Python files
          PYTHON_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "\.py$" | wc -l)
          
          # Get changed documentation files
          DOC_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "\.md$\|^docs/" | wc -l)
          
          echo "Python files changed: $PYTHON_CHANGES"
          echo "Documentation files changed: $DOC_CHANGES"
          
          # Check if significant code changes need docs
          if [ $PYTHON_CHANGES -gt 5 ] && [ $DOC_CHANGES -eq 0 ]; then
            echo "⚠️ Significant code changes without documentation updates"
            echo "needs_docs=true" >> $GITHUB_ENV
          fi
      
      - name: Comment if documentation needed
        if: env.needs_docs == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '📚 **Documentation may be needed**: This PR includes significant code changes. Please consider updating documentation.'
            });

  # Job 7: Dependency Check
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if requirements changed
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "requirements.txt\|setup.py\|pyproject.toml"; then
            echo "dependencies_changed=true" >> $GITHUB_ENV
          fi
      
      - name: Audit dependencies
        if: env.dependencies_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          pip-audit --desc || true
      
      - name: Comment on dependency changes
        if: env.dependencies_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '📦 **Dependencies changed**: This PR modifies dependencies. Please ensure all changes are necessary and secure.'
            });

  # Job 8: PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, code-review, coverage-check, security-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Generate PR summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              validation: '${{ needs.pr-validation.result }}',
              review: '${{ needs.code-review.result }}',
              coverage: '${{ needs.coverage-check.result }}',
              security: '${{ needs.security-check.result }}'
            };
            
            const emoji = {
              success: '✅',
              failure: '❌',
              skipped: '⏭️'
            };
            
            let summary = '## PR Check Summary\n\n';
            summary += `${emoji[results.validation] || '❓'} Validation: ${results.validation}\n`;
            summary += `${emoji[results.review] || '❓'} Code Review: ${results.review}\n`;
            summary += `${emoji[results.coverage] || '❓'} Coverage: ${results.coverage}\n`;
            summary += `${emoji[results.security] || '❓'} Security: ${results.security}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });


name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy bandit safety
          pip install -e .
      
      - name: Run Black (code formatting)
        run: |
          black --check --diff bountybot/ tests/
        continue-on-error: true
      
      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff bountybot/ tests/
        continue-on-error: true
      
      - name: Run Flake8 (linting)
        run: |
          flake8 bountybot/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 bountybot/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Run Pylint (static analysis)
        run: |
          pylint bountybot/ --exit-zero --max-line-length=127
        continue-on-error: true
      
      - name: Run MyPy (type checking)
        run: |
          mypy bountybot/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true
      
      - name: Run Bandit (security scanning)
        run: |
          bandit -r bountybot/ -f json -o bandit-report.json || true
          bandit -r bountybot/ -ll
        continue-on-error: true
      
      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json || true
        continue-on-error: true
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --tb=short --cov=bountybot --cov-report=xml --cov-report=term
        timeout-minutes: 15
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: bountybot
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: bountybot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://bountybot:testpassword@localhost:5432/bountybot_test
        run: |
          python -m pytest tests/ -v -m integration --tb=short
        timeout-minutes: 10

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 5: Docker Build
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bountybot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm bountybot:test python -c "import bountybot; print('Import successful')"
      
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bountybot:test'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-benchmark memory_profiler
      
      - name: Run performance tests
        run: |
          python -m pytest tests/ -v -m performance --benchmark-only --benchmark-json=benchmark.json
        continue-on-error: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark.json

  # Job 7: Documentation
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
      
      - name: Build documentation
        run: |
          cd docs && make html
        continue-on-error: true
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation
          path: docs/_build/html/

  # Job 8: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, docker-build]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
      
      - name: Fail if critical jobs failed
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure' ||
          needs.docker-build.result == 'failure'
        run: exit 1


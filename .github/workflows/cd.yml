name: CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=bountybot --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: release

  # Job 2: Build Docker Image
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Create Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save to file
          echo "$CHANGELOG" > CHANGELOG.txt
          
          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ## Installation
            
            ```bash
            pip install git+https://github.com/${{ github.repository }}@${{ github.ref_name }}
            ```
          draft: false
          prerelease: false
          files: |
            CHANGELOG.txt

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.bountybot.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your deployment commands here
          # Examples:
          # - kubectl set image deployment/bountybot bountybot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # - helm upgrade bountybot ./charts/bountybot --set image.tag=${{ github.sha }}
          # - aws ecs update-service --cluster staging --service bountybot --force-new-deployment
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          # curl -f https://staging.bountybot.example.com/health || exit 1

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build-push, create-release]
    if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://bountybot.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          # Add your deployment commands here
          # Examples:
          # - kubectl set image deployment/bountybot bountybot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          # - helm upgrade bountybot ./charts/bountybot --set image.tag=${{ github.ref_name }}
          # - aws ecs update-service --cluster production --service bountybot --force-new-deployment
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          # curl -f https://bountybot.example.com/health || exit 1
      
      - name: Notify deployment
        run: |
          echo "Production deployment complete!"
          # Add notification commands here
          # - Send Slack notification
          # - Send email
          # - Update status page

  # Job 6: Rollback (Manual)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/'))
    needs: [deploy-production]
    environment:
      name: production
    
    steps:
      - name: Rollback production
        run: |
          echo "Rolling back production deployment..."
          # Add rollback commands here
          # - kubectl rollout undo deployment/bountybot
          # - helm rollback bountybot
      
      - name: Notify rollback
        run: |
          echo "Production rollback complete!"
          # Add notification commands here

  # Job 7: Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Run performance tests
        run: |
          echo "Running performance tests against production..."
          # Add performance test commands here
          # - Run load tests
          # - Check response times
          # - Verify throughput
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results.json

